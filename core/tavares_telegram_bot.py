import asyncio
import logging
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from telegram import Bot
from telegram.ext import Application, CommandHandler, ContextTypes
import time
import ccxt

logger = logging.getLogger('TavaresTelegram')

class TavaresTelegramBot:
    """TAVARES A EVOLU√á√ÉO - Vers√£o Telegram COM BYBIT REAL"""
    
    def __init__(self):
        # üß† Sistema Neural
        from cerebro.rede_neural_leve import CerebroNeuralLeve
        from cerebro.analise_sentimentos import AnalisadorSentimentos
        
        self.cerebro = CerebroNeuralLeve()
        self.analisador_sentimentos = AnalisadorSentimentos()
        
        # üí∞ Bybit Real
        from core.exchange_manager import BybitManager
        self.bybit = BybitManager()
        
        # ü§ñ Telegram
        from core.config import config
        self.config = config
        self.bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
        self.chat_id = config.TELEGRAM_CHAT_ID
        
        # üìä Estado do Bot
        self.estado = {
            'status': 'üü¢ INICIANDO',
            'modo': 'BYBIT REAL üí∞',
            'ciclo_atual': 0,
            'ultima_atualizacao': datetime.now().isoformat(),
            'performance': {
                'total_ciclos': 0,
                'operacoes_executadas': 0,
                'operacoes_lucrativas': 0,
                'lucro_total': 0.0,
                'saldo_atual': self.bybit.obter_saldo(),
                'win_rate': 0.0
            },
            'sentimento_mercado': {},
            'historico_operacoes': []
        }
        
        logger.info("ü§ñ TAVARES TELEGRAM BYBIT REAL - INICIALIZADO!")
        
    async def enviar_mensagem(self, texto):
        """Enviar mensagem para o Telegram"""
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=texto,
                parse_mode='HTML'
            )
            logger.info(f"üì§ Mensagem enviada: {texto[:50]}...")
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar mensagem Telegram: {e}")
    
    async def enviar_operacao_real(self, operacao):
        """Enviar notifica√ß√£o de opera√ß√£o REAL"""
        sinal = operacao['sinal']
        resultado = operacao.get('resultado', {})
        
        emoji = "üü¢" if resultado.get('sucesso', True) else "üî¥"
        seta = "üìà" if sinal['direcao'] == 'BUY' else "üìâ"
        
        mensagem = f"""
{emoji} <b>üî• OPERA√á√ÉO REAL EXECUTADA</b> {seta}

<b>Par:</b> {sinal['par']}
<b>Dire√ß√£o:</b> {sinal['direcao']}
<b>Confian√ßa:</b> {sinal['confianca_neural']:.1f}%
<b>Valor:</b> ${self.config.VALOR_POR_TRADE}

<b>ID Ordem:</b> {operacao.get('id_ordem', 'N/A')}
<b>Pre√ßo Execu√ß√£o:</b> {operacao.get('preco_execucao', 'N/A')}

<b>Saldo Atual:</b> ${self.estado['performance']['saldo_atual']:.2f}

‚è∞ <i>{datetime.now().strftime('%H:%M:%S')}</i>
        """
        
        await self.enviar_mensagem(mensagem)
    
    async def executar_operacao_real(self, previsao):
        """Executar opera√ß√£o REAL na Bybit"""
        try:
            logger.info(f"üí∞ EXECUTANDO OPERA√á√ÉO REAL: {previsao['par']} {previsao['direcao']}")
            
            # Executar ordem na Bybit
            resultado_ordem = await self.bybit.executar_ordem(
                previsao['par'], 
                previsao['direcao'], 
                self.config.VALOR_POR_TRADE
            )
            
            if resultado_ordem:
                # Registrar opera√ß√£o
                operacao = {
                    'id': f"TAVR{int(time.time())}",
                    'sinal': previsao,
                    'resultado_real': resultado_ordem,
                    'timestamp': datetime.now().isoformat(),
                    'tipo': 'REAL'
                }
                
                self.estado['historico_operacoes'].append(operacao)
                self.estado['performance']['operacoes_executadas'] += 1
                
                # Atualizar saldo
                self.estado['performance']['saldo_atual'] = self.bybit.obter_saldo()
                
                # Enviar notifica√ß√£o
                await self.enviar_operacao_real(operacao)
                
                return operacao
            else:
                await self.enviar_mensagem(f"‚ùå <b>FALHA NA ORDEM REAL</b>\nPar: {previsao['par']}\nErro: N√£o executada")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå ERRO OPERA√á√ÉO REAL: {e}")
            await self.enviar_mensagem(f"üí• <b>ERRO CR√çTICO</b>\n{e}")
            return None
    
    async def executar_ciclo_trading_real(self):
        """Executar ciclo de trading REAL"""
        try:
            self.estado['ciclo_atual'] += 1
            self.estado['performance']['total_ciclos'] += 1
            
            logger.info(f"üîÆ CICLO {self.estado['ciclo_atual']} - TAVARES ANALISANDO MERCADO REAL...")
            
            # 1. üì∞ AN√ÅLISE DE SENTIMENTOS
            await self._analisar_sentimentos_mercado()
            
            # 2. üìä COLETAR DADOS REAIS
            dados_mercado = await self._coletar_dados_reais()
            
            # 3. üéØ PREVIS√ÉO NEURAL
            previsoes = await self._gerar_previsoes_neurais(dados_mercado)
            
            # 4. ‚ö° EXECUTAR OPERA√á√ïES REAIS
            await self._executar_operacoes_reais(previsoes)
            
            self.estado['status'] = 'üü¢ OPERANDO REAL'
            self.estado['ultima_atualizacao'] = datetime.now().isoformat()
            
            # 5. üìä RELAT√ìRIO A CADA 10 CICLOS
            if self.estado['ciclo_atual'] % 10 == 0:
                await self.enviar_relatorio_diario()
            
        except Exception as e:
            logger.error(f"‚ùå ERRO NO CICLO REAL: {e}")
            self.estado['status'] = 'üî¥ ERRO TEMPOR√ÅRIO'
            await self.enviar_mensagem(f"‚ö†Ô∏è <b>Erro no ciclo REAL:</b> {str(e)}")
    
    async def _coletar_dados_reais(self):
        """Coletar dados REAIS da Bybit"""
        try:
            dados = {}
            
            for par in self.config.PARES_MONITORADOS:
                try:
                    # Buscar dados OHLCV reais
                    ohlcv = self.bybit.exchange.fetch_ohlcv(par, '15m', limit=100)
                    
                    if ohlcv:
                        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                        dados[par] = {'15m': df}
                        logger.info(f"‚úÖ Dados reais coletados: {par}")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao coletar dados {par}: {e}")
                    continue
            
            return dados
            
        except Exception as e:
            logger.error(f"‚ùå Erro coleta dados reais: {e}")
            return {}
    
    async def _executar_operacoes_reais(self, previsoes):
        """Executar opera√ß√µes REAIS"""
        try:
            for previsao in previsoes:
                # Crit√©rio mais conservador para opera√ß√µes reais
                if previsao['confianca_neural'] > 70:  # 70% de confian√ßa m√≠nima
                    await self.executar_operacao_real(previsao)
                    await asyncio.sleep(1)  # Delay entre opera√ß√µes
                    
        except Exception as e:
            logger.error(f"‚ùå Erro execu√ß√£o real: {e}")
    
    # ... (mant√©m todos os outros m√©todos de comando do Telegram)
    
    async def comando_status(self, update, context):
        """Comando /status - Atualizado para dados reais"""
        perf = self.estado['performance']
        sentimento = self.estado['sentimento_mercado']
        
        # Atualizar saldo real
        saldo_real = self.bybit.obter_saldo()
        self.estado['performance']['saldo_atual'] = saldo_real
        
        mensagem = f"""
üí∞ <b>STATUS TAVARES BYBIT REAL</b>

<b>Performance REAL:</b>
‚Ä¢ Opera√ß√µes: {perf['operacoes_executadas']}
‚Ä¢ Win Rate: {perf['win_rate']:.1f}%
‚Ä¢ Saldo REAL: <b>${saldo_real:.2f}</b>
‚Ä¢ Lucro Total: ${perf['lucro_total']:.2f}

<b>Mercado:</b>
‚Ä¢ Sentimento: {sentimento.get('sentimento_geral', 'N/A')}
‚Ä¢ Score: {sentimento.get('score_medio', 0):.3f}

<b>Sistema:</b>
‚Ä¢ Status: {self.estado['status']}
‚Ä¢ Ciclos: {self.estado['ciclo_atual']}
‚Ä¢ Modo: <b>BYBIT REAL üí∞</b>

üü¢ <i>Operando com dinheiro real</i>
        """
        
        await update.message.reply_text(mensagem, parse_mode='HTML')
    
    async def comando_saldo(self, update, context):
        """Comando /saldo - Ver saldo real"""
        saldo = self.bybit.obter_saldo()
        
        mensagem = f"""
üí∞ <b>SALDO BYBIT REAL</b>

<b>Saldo Dispon√≠vel:</b> <code>${saldo:.2f}</code>
<b>Valor por Trade:</b> <code>${self.config.VALOR_POR_TRADE}</code>
<b>Risco por Trade:</b> <code>{self.config.RISK_PER_TRADE*100}%</code>

üí∏ <i>Gest√£o conservadora ativa</i>
        """
        
        await update.message.reply_text(mensagem, parse_mode='HTML')
    
    async def iniciar_telegram_bot(self):
        """Iniciar bot do Telegram"""
        try:
            application = Application.builder().token(self.config.TELEGRAM_BOT_TOKEN).build()
            
            # Comandos
            application.add_handler(CommandHandler("start", self.comando_start))
            application.add_handler(CommandHandler("status", self.comando_status))
            application.add_handler(CommandHandler("operacoes", self.comando_operacoes))
            application.add_handler(CommandHandler("performance", self.comando_performance))
            application.add_handler(CommandHandler("sentimento", self.comando_sentimento))
            application.add_handler(CommandHandler("saldo", self.comando_saldo))
            
            # Mensagem de boas-vindas REAL
            saldo_inicial = self.bybit.obter_saldo()
            await self.enviar_mensagem(
                f"ü§ñ <b>TAVARES A EVOLU√á√ÉO - BYBIT REAL</b> üî•\n\n"
                f"üí∞ <b>Saldo Inicial:</b> ${saldo_inicial:.2f}\n"
                f"üéØ <b>Modo:</b> OPERA√á√ÉO REAL\n"
                f"‚ö° <b>Valor por Trade:</b> ${self.config.VALOR_POR_TRADE}\n"
                f"üõ°Ô∏è <b>Risco:</b> {self.config.RISK_PER_TRADE*100}%\n\n"
                f"üß† <i>Sistema neural real ativado</i>\n"
                f"üìä <i>Monitoramento 24/7</i>\n"
                f"üöÄ <i>Pronto para operar!</i>"
            )
            
            logger.info("ü§ñ Bot Telegram REAL inicializado")
            return application
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar Telegram: {e}")
            return None
    
    async def executar_continuamente(self):
        """Executar sistema continuamente"""
        logger.info("üöÄ TAVARES BYBIT REAL - INICIANDO SISTEMA")
        
        # Iniciar bot Telegram
        telegram_app = await self.iniciar_telegram_bot()
        
        if telegram_app:
            await telegram_app.initialize()
            await telegram_app.start()
            await telegram_app.updater.start_polling()
        
        # Loop principal de trading REAL
        while True:
            try:
                await self.executar_ciclo_trading_real()
                await asyncio.sleep(self.config.INTERVALO_ANALISE)
                
            except Exception as e:
                logger.error(f"üí• ERRO CR√çTICO REAL: {e}")
                await asyncio.sleep(60)
